const t=window.MnApp.h;class e{constructor(){this.fruitsData='{"prod": "Fruits", "items": ["Banana", "Apple", "Orange"]}'}componentWillLoad(){console.log("componentWillLoad()")}componentDidLoad(){console.log("componentDidLoad()");const t=this._elDiv.shadowRoot;console.log(t);const e=t.getElementById("name");console.log(e),console.log(e.innerText),e.innerText=`${e.innerText} - updated via shadow root access..`;const o=t.getElementById("deeply-nested");console.log(o.innerText),console.log("--- Access Inner ShadowDOM ---");const n=t.querySelector("my-list");console.log(n);const s=n.shadowRoot.querySelector("h2");console.log(s.innerText),console.log("--- Access Child containers ---");const l=n.shadowRoot.querySelectorAll("my-list-item");console.log(l),l.forEach(t=>{console.log(t),console.log(t.shadowRoot.querySelector("h3").innerText)})}render(){return t("div",null,t("h2",null,"Hello Shadow DOM!"),t("p",null,"Name:",t("span",{id:"name"},this.name)),t("div",null,t("div",null,t("div",{id:"deeply-nested"},"Deeply nested div"))),t("hr",null),t("my-list",{data:this.fruitsData}))}static get is(){return"host-shadow-dom"}static get encapsulation(){return"shadow"}static get properties(){return{_elDiv:{elementRef:!0},_elDivMyList:{elementRef:!0},_mylist:{elementRef:!0},name:{type:String,attr:"name"}}}}class o{componentWillLoad(){console.log("mylist-componentDidLoad()");try{this._prod=JSON.parse(this.data)}catch(t){console.log("Error: "+t)}console.log(this._prod)}render(){return t("div",null,t("h2",null,"My List - ",this._prod.prod),this._prod.items.map(e=>t("my-list-item",{data:e})))}static get is(){return"my-list"}static get encapsulation(){return"shadow"}static get properties(){return{_prod:{state:!0},data:{type:String,attr:"data"}}}}class n{componentDidLoad(){console.log("mylist-item-componentDidLoad()")}render(){return t("div",null,t("h3",null,this.data))}static get is(){return"my-list-item"}static get encapsulation(){return"shadow"}static get properties(){return{data:{type:String,attr:"data"}}}}export{e as HostShadowDom,o as MyList,n as MyListItem};